name: Deploy MOS Demo to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ closed ]
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps
        
    - name: Clean and Build PWA
      run: |
        cd frontend
        rm -rf dist
        # Build with correct base path for GitHub Pages
        npm run build -- --base=/mos/
        
    - name: Create PWA files
      run: |
        cd frontend/dist
        
        # Create .htaccess for proper MIME types (though GitHub Pages doesn't support it, worth trying)
        cat > .htaccess << 'EOF'
        AddType application/javascript .js
        AddType text/css .css
        AddType image/svg+xml .svg
        EOF
        
        # Create manifest.json
        cat > manifest.json << 'EOF'
        {
          "name": "MOS - Mat och Sovklocka",
          "short_name": "MOS",
          "description": "Reminder app for meal and sleep schedules",
          "start_url": "/",
          "display": "standalone",
          "background_color": "#ffffff",
          "theme_color": "#2563eb",
          "orientation": "portrait-primary",
          "scope": "/",
          "icons": [
            {
              "src": "/vite.svg",
              "sizes": "any",
              "type": "image/svg+xml"
            }
          ],
          "categories": ["health", "lifestyle", "productivity"],
          "lang": "sv",
          "dir": "ltr"
        }
        EOF
        
        # Create service worker
        cat > sw.js << 'EOF'
        const CACHE_NAME = 'mos-demo-v1';
        const urlsToCache = [
          '/',
          '/index.html',
          '/manifest.json',
          '/vite.svg'
        ];
        
        self.addEventListener('install', (event) => {
          event.waitUntil(
            caches.open(CACHE_NAME)
              .then((cache) => cache.addAll(urlsToCache))
          );
        });
        
        self.addEventListener('fetch', (event) => {
          event.respondWith(
            caches.match(event.request)
              .then((response) => {
                return response || fetch(event.request);
              })
          );
        });
        EOF
        
        # Create offline page
        cat > offline.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>MOS - Offline</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
        </head>
        <body>
            <h1>MOS Demo - Offline</h1>
            <p>This app works offline! You can still use it without internet.</p>
        </body>
        </html>
        EOF
        
        echo "PWA files created successfully!"
        
    - name: Debug build output
      run: |
        cd frontend/dist
        echo "Files in dist:"
        ls -la
        echo "Files in assets:"
        ls -la assets/
        echo "Contents of index.html:"
        cat index.html
        echo "Checking for JavaScript files:"
        find . -name "*.js" -type f
        echo "Checking for CSS files:"
        find . -name "*.css" -type f
        
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./frontend/dist
        retention-days: 1

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}
