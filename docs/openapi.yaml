openapi: 3.0.1
info:
  title: MOS (Meal and Reminder System) API
  description: API for managing meal requirements, reminders, and user authentication
  version: 1.0.0
  contact:
    name: MOS Development Team
    email: dev@mos.example.com
servers:
- url: http://localhost:8080
  description: Development server
- url: https://api.mos.example.com
  description: Production server
paths:
  # Authentication endpoints
  /api/auth/login:
    post:
      tags:
      - authentication
      summary: User login
      description: Authenticate a user and return a JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              email: "admin@mos.test"
              password: "password123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
              example:
                token: "eyJhbGciOiJIUzUxMiJ9..."
                tokenType: "Bearer"
                userId: "550e8400-e29b-41d4-a716-446655440001"
                email: "admin@mos.test"
                displayName: "System Administrator"
                userType: "ADMIN"
                expiresAt: "2025-09-23T09:20:54Z"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email or password"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed"

  /api/auth/me:
    get:
      tags:
      - authentication
      summary: Get current user information
      description: Retrieve details of the authenticated user
      operationId: getCurrentUser
      security:
      - bearerAuth: []
      responses:
        "200":
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoResponse"
              example:
                id: "550e8400-e29b-41d4-a716-446655440001"
                email: "admin@mos.test"
                displayName: "System Administrator"
                userType: "ADMIN"
                isActive: true
                createdAt: "2025-09-22T09:13:56.743059+00"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

  /api/auth/logout:
    post:
      tags:
      - authentication
      summary: User logout
      description: Logout the current user (client-side token invalidation)
      operationId: logout
      security:
      - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
  /api/users/{userId}/reminders:
    get:
      tags:
      - reminders
      summary: Get user reminders
      description: Retrieve all reminders for a specific user
      operationId: getReminders
      security:
      - bearerAuth: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReminderDto"
        "403":
          description: Forbidden - User doesn't have permission to view reminders
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "You don't have permission to view reminders"
    post:
      tags:
      - reminders
      summary: Create a reminder
      description: "Create a new reminder with time, category, and optional note."
      operationId: createReminder
      security:
      - bearerAuth: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReminderRequest"
        required: true
      responses:
        "201":
          description: Reminder created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReminderDto"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "time must be now or future (±5m)"
        "403":
          description: Forbidden - User doesn't have permission to create reminders
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "You don't have permission to create reminders"
  /api/users/{userId}/reminders/{reminderId}:
    put:
      tags:
      - reminders
      summary: Update a reminder
      description: Update an existing reminder with new time, category, or note
      operationId: updateReminder
      security:
      - bearerAuth: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
      - name: reminderId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Reminder ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReminderRequest"
            examples:
              updateOnceReminder:
                summary: Update a one-time reminder
                value:
                  type: "once"
                  category: "medicin"
                  dateTime: "2025-09-27T14:30:00Z"
                  note: "Updated medication reminder"
              updateRecurringReminder:
                summary: Update a recurring reminder
                value:
                  type: "recurring"
                  category: "måltider"
                  days: ["Mon", "Wed", "Fri"]
                  times: ["08:00", "12:00", "18:00"]
                  note: "Updated meal reminders"
              partialUpdate:
                summary: Partial update (only note)
                value:
                  note: "Just updating the note"
      responses:
        "200":
          description: Reminder updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReminderDto"
              example:
                id: "550e8400-e29b-41d4-a716-446655440001"
                time: "2025-09-27T14:30:00Z"
                category: "MEDICATION"
                note: "Updated medication reminder"
                createdAt: "2025-09-26T12:00:00Z"
                type: "once"
                recurrence: null
        "400":
          description: Invalid input or reminder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Reminder not found for user"
        "403":
          description: Forbidden - User doesn't have permission to update reminders
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "You don't have permission to update reminders"
        "404":
          description: Reminder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not Found"
                  message:
                    type: string
                    example: "Reminder not found"
    delete:
      tags:
      - reminders
      summary: Delete a reminder
      description: Delete a specific reminder by ID
      operationId: deleteReminder
      security:
      - bearerAuth: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
      - name: reminderId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Reminder ID
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden - User doesn't have permission to delete reminders
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "You don't have permission to delete reminders"

  /api/users/{userId}/meal-requirements:
    get:
      tags:
      - meal-requirements
      summary: Get user meal requirements
      description: Retrieve all meal requirements for a specific user
      operationId: getMealRequirements
      security:
      - bearerAuth: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MealRequirementsResponse"
        "403":
          description: Forbidden - User doesn't have permission to view meal requirements
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "You don't have permission to view meal requirements"
    post:
      tags:
      - meal-requirements
      summary: Set meal requirements
      description: Set meal requirements for a user. Replaces all existing requirements.
      operationId: setMealRequirements
      security:
      - bearerAuth: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MealRequirementsRequest"
        required: true
      responses:
        "201":
          description: Meal requirements set successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MealRequirementsResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Validation failed"
        "403":
          description: Forbidden - User doesn't have permission to manage meal requirements
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "You don't have permission to manage meal requirements"

  # User Management endpoints
  /api/user-management/caretakers:
    post:
      tags:
      - user-management
      summary: Create a caretaker
      description: Create a new caretaker user and assign them to the current caregiver
      operationId: createCaretaker
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCaretakerRequest"
            example:
              name: "John Doe"
              email: "john.doe@example.com"
      responses:
        "200":
          description: Caretaker created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                id: "550e8400-e29b-41d4-a716-446655440002"
                email: "john.doe@example.com"
                displayName: "John Doe"
                userType: "RESIDENT"
                isActive: true
                createdAt: "2025-10-07T11:35:30.000Z"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Email already exists"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

    get:
      tags:
      - user-management
      summary: List caretakers
      description: Get all caretakers assigned to the current caregiver
      operationId: getCaretakers
      security:
      - bearerAuth: []
      responses:
        "200":
          description: List of caretakers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
              example:
                - id: "550e8400-e29b-41d4-a716-446655440002"
                  email: "john.doe@example.com"
                  displayName: "John Doe"
                  userType: "RESIDENT"
                  isActive: true
                  createdAt: "2025-10-07T11:35:30.000Z"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

  /api/user-management/caretakers/{caretakerId}/permissions:
    get:
      tags:
      - user-management
      summary: Get caretaker permissions
      description: Get all permissions for a specific caretaker
      operationId: getCaretakerPermissions
      security:
      - bearerAuth: []
      parameters:
      - name: caretakerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Caretaker ID
      responses:
        "200":
          description: List of permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ["CREATE_REMINDERS", "VIEW_REMINDERS", "MEAL_REQUIREMENTS"]
        "403":
          description: Forbidden - Caretaker not assigned to current caregiver
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Access denied"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

    put:
      tags:
      - user-management
      summary: Set caretaker permissions
      description: Set permissions for a specific caretaker
      operationId: setCaretakerPermissions
      security:
      - bearerAuth: []
      parameters:
      - name: caretakerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Caretaker ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetPermissionsRequest"
            example:
              permissions: ["CREATE_REMINDERS", "VIEW_REMINDERS"]
      responses:
        "200":
          description: Permissions updated successfully
        "403":
          description: Forbidden - Caretaker not assigned to current caregiver
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Access denied"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

  /api/user-management/caretakers/{caretakerId}:
    delete:
      tags:
      - user-management
      summary: Delete caretaker
      description: Delete a caretaker and remove all their assignments
      operationId: deleteCaretaker
      security:
      - bearerAuth: []
      parameters:
      - name: caretakerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Caretaker ID
      responses:
        "200":
          description: Caretaker deleted successfully
        "403":
          description: Forbidden - Caretaker not assigned to current caregiver
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Access denied"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

  /api/user-management/permissions:
    get:
      tags:
      - user-management
      summary: Get current user permissions
      description: Get all permissions for the current authenticated user
      operationId: getCurrentUserPermissions
      security:
      - bearerAuth: []
      responses:
        "200":
          description: List of current user permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ["CREATE_REMINDERS", "VIEW_REMINDERS", "MEAL_REQUIREMENTS"]
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

  /api/user-management/admin/users:
    post:
      tags:
      - user-management
      summary: Create a new user (Admin only)
      description: Create a new user of any type (ADMIN, CAREGIVER, RESIDENT) with automatic permission assignment
      operationId: createUser
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
            examples:
              createAdmin:
                summary: Create a new admin user
                value:
                  name: "New Admin"
                  email: "newadmin@mos.test"
                  userType: "ADMIN"
              createCaregiver:
                summary: Create a new caregiver user
                value:
                  name: "New Caregiver"
                  email: "newcaregiver@mos.test"
                  userType: "CAREGIVER"
              createResident:
                summary: Create a new resident user
                value:
                  name: "New Resident"
                  email: "newresident@mos.test"
                  userType: "RESIDENT"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                id: "550e8400-e29b-41d4-a716-446655440005"
                email: "newadmin@mos.test"
                displayName: "New Admin"
                userType: "ADMIN"
                isActive: true
                createdAt: "2025-10-07T11:35:30.000Z"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Email already exists"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Only admins can create users
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Only admins can create users"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /api/auth/login

  schemas:
    # Authentication schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "admin@mos.test"
        password:
          type: string
          format: password
          description: User password
          example: "password123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzUxMiJ9..."
        tokenType:
          type: string
          description: Token type
          example: "Bearer"
        userId:
          type: string
          format: uuid
          description: User ID
          example: "550e8400-e29b-41d4-a716-446655440001"
        email:
          type: string
          format: email
          description: User email
          example: "admin@mos.test"
        displayName:
          type: string
          description: User display name
          example: "System Administrator"
        userType:
          type: string
          enum: [ADMIN, CAREGIVER, RESIDENT]
          description: User role
          example: "ADMIN"
        expiresAt:
          type: string
          format: date-time
          description: Token expiration time
          example: "2025-09-23T09:20:54Z"

    UserInfoResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
          example: "550e8400-e29b-41d4-a716-446655440001"
        email:
          type: string
          format: email
          description: User email
          example: "admin@mos.test"
        displayName:
          type: string
          description: User display name
          example: "System Administrator"
        userType:
          type: string
          enum: [ADMIN, CAREGIVER, RESIDENT]
          description: User role
          example: "ADMIN"
        isActive:
          type: boolean
          description: Whether user account is active
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2025-09-22T09:13:56.743059+00"

    # User management schemas
    UserType:
      type: string
      enum: [ADMIN, CAREGIVER, RESIDENT]
      description: User role types

    # Reminder schemas
    CreateReminderRequest:
      type: object
      required:
        - type
        - category
        - dateTime
      properties:
        type:
          type: string
          description: Reminder type
          example: "måltider"
        category:
          type: string
          enum: [MEDICATION, MEAL]
          description: Reminder category
          example: "MEAL"
        dateTime:
          type: string
          format: date-time
          description: Reminder date and time
          example: "2025-09-22T12:00:00Z"
        note:
          type: string
          description: Optional note
          example: "Lunch reminder"

    UpdateReminderRequest:
      type: object
      description: Request body for updating a reminder (all fields optional for partial updates)
      properties:
        type:
          type: string
          enum: ["once", "recurring"]
          description: Reminder type
          example: "once"
        category:
          type: string
          description: Reminder category (Swedish or English)
          example: "medicin"
        dateTime:
          type: string
          format: date-time
          description: Reminder date and time (for once type)
          example: "2025-09-27T14:30:00Z"
        days:
          type: array
          items:
            type: string
          description: Days of the week for recurring reminders
          example: ["Mon", "Wed", "Fri"]
        times:
          type: array
          items:
            type: string
          description: Times for recurring reminders
          example: ["08:00", "12:00", "18:00"]
        note:
          type: string
          description: Optional note
          example: "Updated reminder note"

    ReminderDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Reminder ID
          example: "550e8400-e29b-41d4-a716-446655440001"
        time:
          type: string
          format: date-time
          description: Reminder time
          example: "2025-09-22T12:00:00Z"
        category:
          type: string
          enum: [MEDICATION, MEAL]
          description: Reminder category
          example: "MEAL"
        note:
          type: string
          description: Reminder note
          example: "Lunch reminder"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-09-22T09:13:56.743059+00"

    # Meal requirement schemas
    MealRequirementsRequest:
      type: object
      required:
        - requirements
      properties:
        requirements:
          type: array
          items:
            type: string
          example: ["Laktosfri", "Diabetesanpassad"]
    MealRequirementsResponse:
      type: object
      properties:
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/MealRequirementDto'
    MealRequirementDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        requirement:
          type: string
        createdAt:
          type: string
          format: date-time

    # User Management schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
          example: "550e8400-e29b-41d4-a716-446655440001"
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        displayName:
          type: string
          description: User display name
          example: "John Doe"
        userType:
          type: string
          enum: [ADMIN, CAREGIVER, RESIDENT]
          description: User role
          example: "RESIDENT"
        isActive:
          type: boolean
          description: Whether user account is active
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2025-10-07T11:35:30.000Z"

    CreateCaretakerRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: Caretaker's display name
          example: "John Doe"
        email:
          type: string
          format: email
          description: Caretaker's email address
          example: "john.doe@example.com"

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - userType
      properties:
        name:
          type: string
          description: User's display name
          example: "New Admin"
        email:
          type: string
          format: email
          description: User's email address
          example: "newadmin@mos.test"
        userType:
          type: string
          enum: ["ADMIN", "CAREGIVER", "RESIDENT"]
          description: Type of user to create
          example: "ADMIN"

    SetPermissionsRequest:
      type: object
      required:
        - permissions
      properties:
        permissions:
          type: array
          items:
            type: string
            enum: [CREATE_REMINDERS, VIEW_REMINDERS, MEAL_REQUIREMENTS, MEAL_SUGGESTIONS, STATISTICS]
          description: List of permissions to grant
          example: ["CREATE_REMINDERS", "VIEW_REMINDERS", "MEAL_REQUIREMENTS"]

